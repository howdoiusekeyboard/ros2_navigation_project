planner_server:
  ros__parameters:
    expected_planner_frequency: 10.0 # How often planner is expected to be called (info only)
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner" # Classic A* / Dijkstra planner
      tolerance: 0.5 # If goal is within this distance to obstacle, allows planning anyway
      use_astar: false # false = Dijkstra, true = A*
      allow_unknown: true # Allow planning through unknown space

    # Global Costmap (directly embedded in planner server)
    global_costmap:
      global_costmap: # Yes, nested like this
        ros__parameters:
          update_frequency: 1.0 # How often to update the map with sensor data
          publish_frequency: 1.0 # How often to publish the costmap for visualization
          global_frame: map # Global map operates in map frame
          robot_base_frame: base_link # MUST MATCH OTHER CONFIGS AND TF (e.g., base_footprint)
          use_sim_time: True
          robot_radius: 0.15 # Approximate robot radius
          resolution: 0.05 # MUST MATCH SAVED MAP RESOLUTION
          track_unknown_space: true # Treat unknown space as potentially traversable
          # Static map layer, Obstacle layer (from sensors), Inflation layer
          plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
          static_layer:
            plugin: "nav2_costmap_2d::StaticLayer"
            map_subscribe_transient_local: True # Subscribe to the map topic from map_server
          obstacle_layer:
            plugin: "nav2_costmap_2d::ObstacleLayer" # Use ObstacleLayer for 2D Lidar
            enabled: True
            observation_sources: scan # Add pointcloud if you have 3D sensor
            scan:
              topic: /scan # Your laser scan topic
              max_obstacle_height: 2.0
              clearing: True
              marking: True
              data_type: "LaserScan"
              raytrace_max_range: 3.0
              raytrace_min_range: 0.0
              obstacle_max_range: 2.5
              obstacle_min_range: 0.0
            # Example Voxel Layer config (if using 3D Sensor INSTEAD of/AS WELL AS scan for global map):
            # Remove 'obstacle_layer' from plugins list if using only voxel.
            # Keep BOTH 'obstacle_layer' and 'voxel_layer' if using both sensors.
          # voxel_layer:
          #   plugin: "nav2_costmap_2d::VoxelLayer"
          #   enabled: True
          #   publish_voxel_map: True
          #   origin_z: 0.0
          #   z_resolution: 0.05
          #   z_voxels: 16
          #   max_obstacle_height: 2.0
          #   mark_threshold: 0
          #   observation_sources: pointcloud # Add 'scan' if also using lidar with voxel
          #   pointcloud:
          #     topic: /intel_realsense_r200_depth/points # Your point cloud topic
          #     max_obstacle_height: 2.0
          #     min_obstacle_height: 0.0
          #     obstacle_max_range: 2.5
          #     obstacle_min_range: 0.0
          #     raytrace_max_range: 3.0
          #     raytrace_min_range: 0.0
          #     clearing: True
          #     marking: True
          #     data_type: "PointCloud2"
          #     combination_method: 1 # Max intensity method
          inflation_layer:
            plugin: "nav2_costmap_2d::InflationLayer"
            cost_scaling_factor: 3.0
            inflation_radius: 0.35 # Should be > robot_radius
          always_send_full_costmap: True # Useful for visualization