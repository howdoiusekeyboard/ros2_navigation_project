controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 10.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5 # Note: Setting this non-zero for a non-holonomic robot is unusual. DWB typically uses min_vel_x/min_vel_theta. Consider setting to 0.0 if issues arise.
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"]
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25

    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True # Set to False for better performance once tuned
      # Robot Kinematics (Defaults, adjust for your robot if different)
      min_vel_x: 0.0
      min_vel_y: 0.0 # Should be 0 for non-holonomic (diff drive, ackermann)
      max_vel_x: 0.26 # TB3 Burger max speed
      max_vel_y: 0.0 # Should be 0 for non-holonomic
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.26 # TB3 Burger max speed
      min_speed_theta: 0.0
      # Acceleration Limits (Defaults, adjust for your robot if different)
      acc_lim_x: 2.5
      acc_lim_y: 0.0 # Should be 0 for non-holonomic
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0 # Should be 0 for non-holonomic
      decel_lim_theta: -3.2
      # Trajectory Simulation Parameters
      vx_samples: 20
      vy_samples: 5 # Should be 1 for non-holonomic
      vtheta_samples: 20
      sim_time: 1.7 # How far ahead to simulate trajectories
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25 # Must match general_goal_checker
      trans_stopped_velocity: 0.25 # Check units, might need adjustment
      short_circuit_trajectory_evaluation: True # Optimize by stopping evaluation early
      stateful: True
      # Critic Scoring Parameters (Weights for different behaviors)
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0 # Use default -1.0

    # Local Costmap (directly embedded in controller server)
    local_costmap:
      local_costmap: # Yes, nested like this
        ros__parameters:
          update_frequency: 5.0
          publish_frequency: 2.0
          global_frame: odom # Local map operates in odom frame
          robot_base_frame: base_link # MUST MATCH PARAM ABOVE AND TF TREE (e.g., base_footprint)
          use_sim_time: True
          rolling_window: true # Local map moves with the robot
          width: 3 # Width in meters
          height: 3 # Height in meters
          resolution: 0.05 # Must match global map for layer compatibility often
          robot_radius: 0.15 # Approximate robot radius for inflation
          plugins: ["voxel_layer", "inflation_layer"] # Use voxel for 3D sensors if available, otherwise obstacle_layer; inflation is standard
          inflation_layer:
            plugin: "nav2_costmap_2d::InflationLayer"
            cost_scaling_factor: 3.0
            inflation_radius: 0.35 # Should be > robot_radius
          # Voxel Layer Configuration (use if you have 3D sensor like Kinect, RealSense depth)
          # If only using 2D Lidar, replace 'voxel_layer' with 'obstacle_layer' in plugins list above
          # and configure obstacle_layer instead. This config assumes Voxel.
          voxel_layer:
              plugin: "nav2_costmap_2d::VoxelLayer"
              enabled: True
              publish_voxel_map: True
              origin_z: 0.0
              z_resolution: 0.05
              z_voxels: 16
              max_obstacle_height: 2.0
              mark_threshold: 0
              observation_sources: scan # Add other sources like pointcloud if available
              scan:
                topic: /scan # Topic for your laser scan data
                max_obstacle_height: 2.0 # Don't mark things taller than this
                clearing: True
                marking: True
                data_type: "LaserScan"
                raytrace_max_range: 3.0
                raytrace_min_range: 0.0
                obstacle_max_range: 2.5
                obstacle_min_range: 0.0
          # Ensure plugin lists and costmap settings are consistent
          static_layer: # Often needed for inflation reference even if rolling
             map_subscribe_transient_local: True # Get map from map_server
          always_send_full_costmap: True # Useful for visualization